<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JAVA on Daniel1n - Welcome to My Blog</title>
    <link>https://daniel1n.github.io/categories/java/</link>
    <description>Recent content in JAVA on Daniel1n - Welcome to My Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 17 Aug 2020 15:51:24 +0800</lastBuildDate>
    
	<atom:link href="https://daniel1n.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深入浅出 Java 多线程</title>
      <link>https://daniel1n.github.io/post/24.%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 17 Aug 2020 15:51:24 +0800</pubDate>
      
      <guid>https://daniel1n.github.io/post/24.%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>本文转载自《深入浅出 Java 多线程》 这本书是几位大厂（如阿里）的大佬开源的，Github 地址：https://github.com/RedSpid</description>
    </item>
    
    <item>
      <title>Java内存区域详情解</title>
      <link>https://daniel1n.github.io/post/25.java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E8%AF%A6%E6%83%85%E8%A7%A3/</link>
      <pubDate>Sun, 16 Aug 2020 12:45:41 +0800</pubDate>
      
      <guid>https://daniel1n.github.io/post/25.java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E8%AF%A6%E6%83%85%E8%A7%A3/</guid>
      <description>本文转载自：《可能是把 Java 内存区域讲的最清楚的一篇文章》 写在前面（常见面试题） 基本问题： 介绍下 Java 内存区域（运行时数据区） Java 对象的创建过程（五步</description>
    </item>
    
    <item>
      <title>HashMap 的 7 种遍历方式与性能分析</title>
      <link>https://daniel1n.github.io/post/23.hashmap%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sat, 15 Aug 2020 11:29:33 +0800</pubDate>
      
      <guid>https://daniel1n.github.io/post/23.hashmap%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/</guid>
      <description>随着 JDK 1.8 Streams API 的发布，使得 HashMap 拥有了更多的遍历的方式，但应该选择那种遍历方式？反而成了一个问题。 转载自：HashMap 的 7 种遍历方式与性能分析 本</description>
    </item>
    
    <item>
      <title>JAD反编译</title>
      <link>https://daniel1n.github.io/post/22.%E5%8F%8D%E7%BC%96%E8%AF%91/</link>
      <pubDate>Fri, 14 Aug 2020 16:09:57 +0800</pubDate>
      
      <guid>https://daniel1n.github.io/post/22.%E5%8F%8D%E7%BC%96%E8%AF%91/</guid>
      <description>jad反编译工具，已经不再更新，且只支持JDK1.4，但并不影响其强大的功能。 基本用法：jad xxx.class，会生成直接可读的xxx.j</description>
    </item>
    
    <item>
      <title>什么是反射机制?反射机制的应用场景有哪些?</title>
      <link>https://daniel1n.github.io/post/21.%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 14 Aug 2020 16:05:37 +0800</pubDate>
      
      <guid>https://daniel1n.github.io/post/21.%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</guid>
      <description>反射机制介绍 JAVA 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；</description>
    </item>
    
    <item>
      <title>枚举Enum的基本使用</title>
      <link>https://daniel1n.github.io/post/20.enum/</link>
      <pubDate>Fri, 14 Aug 2020 14:25:48 +0800</pubDate>
      
      <guid>https://daniel1n.github.io/post/20.enum/</guid>
      <description>什么是 Java 枚举，它们解决了哪些问题以及如何在实践中使用 Java 枚举实现一些设计模式 这篇文章由 JavaGuide 翻译，公众号: JavaGuide,原文地址：https</description>
    </item>
    
  </channel>
</rss>